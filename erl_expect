#!/usr/bin/env escript
%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ft=erlang ts=4 sw=4 et
%% -------------------------------------------------------------------
%%
%% nodetool: Helper Script for interacting with live nodes
%%
%% -------------------------------------------------------------------
main(Args) ->
    ok = start_epmd(),
    %% Extract the args
    erlang:put(echo,false),
    {RestArgs, TargetNode} = process_args(Args, [], undefined),
    %% any commands that don't need a running node
    ScriptName
        = case RestArgs of
              ["check", File] ->
                  case file:consult(File) of
                      {ok, _} ->
                          io:format("ok\n"),
                          halt(0);
                      {error, {Line, Mod, Term}} ->
                          io:format(standard_error, ["Error on line ",
                                                     file:format_error({Line, Mod, Term}), "\n"], []),
                          halt(1);
                      {error, R} ->
                          io:format(standard_error, ["Error reading config file: ",
                                                     file:format_error(R), "\n"], []),
                          halt(1)
                  end;
              [File| _ ] -> File;
              _OtherWise ->
                  io:format("~p~n", [_OtherWise]),
                  usage(),
                  halt(1)
          end,

    %% See if the node is currently running  -- if it's not, we'll bail
    case {net_kernel:hidden_connect_node(TargetNode),
          net_adm:ping(TargetNode)} of
        {true, pong} ->
            ok;
        {false,pong} ->
            io:format("error: Failed to connect to node ~p .\n", [TargetNode]),
            halt(1);
        {_, pang} ->
            io:format("error: Node ~p not responding to pings.\n", [TargetNode]),
            halt(1)
    end,

    case file:read_file(ScriptName) of
        {ok, ScriptString} ->
            try
                Bindings =
                    lists:foldl(
                      fun({Name, Value}, Binding) ->
                              erl_eval:add_binding(Name, Value, Binding)
                      end,
                      erl_eval:new_bindings(),
                      [{'Args', tl(RestArgs)}]),
                Exprs = parse(binary_to_list(ScriptString)),
                register(return_port, self()),
                process_flag(trap_exit, true),
                _RemotePid =
                    spawn_link(TargetNode,
                               erl_eval,
                               exprs,
                               [
                                Exprs, Bindings
                               ]),
                %% io:format("start to wait ~p ~n~n",[Pid]),
                receive
                    {'EXIT', _Pid, normal} ->
                        ok;
                    {'EXIT', _Pid, Exception} ->
                        io:format("Exception = ~p~n", [Exception]),
                        halt(1);
                    ok ->
                        ok;
                    {value, ok, _Values} ->
                        ok %io:format("DONE Value= ~p~n", [Values])
                end
            catch
                Class:Error ->
                    io:format("parse error ~p:~p ~p~n", [Class, Error, erlang:get_stacktrace()]),
                    halt(1)
            end;
        FileError ->
            io:format("error reading file ~p ~p~n", [ ScriptName, FileError]),
            halt(1)
    end,
    net_kernel:stop().

process_args([], Acc, TargetNode) ->
    {lists:reverse(Acc), TargetNode};
process_args(["-setcookie", Cookie | Rest], Acc, TargetNode) ->
    erlang:set_cookie(node(), list_to_atom(Cookie)),
    process_args(Rest, Acc, TargetNode);
process_args(["-name", TargetName | Rest], Acc, _) ->
    start_one_local_node(TargetName, longnames),
    set_default_cookie(),
    process_args(Rest, Acc, nodename(TargetName));
process_args(["-sname", TargetName | Rest], Acc, _) ->
    start_one_local_node(TargetName, shortnames),
    set_default_cookie(),
    process_args(Rest, Acc, nodename(TargetName));
process_args(["-echo" | Rest], Acc, TargetNode) ->
    erlang:put(echo,true),
    process_args(Rest, Acc, TargetNode);
process_args(["-noecho" | Rest], Acc, TargetNode) ->
    erlang:put(echo,false),
    process_args(Rest, Acc, TargetNode);
process_args([Arg | Rest], Acc, Opts) ->
    process_args(Rest, [Arg | Acc], Opts).

start_one_local_node(TargetName, Flag) ->
    start_one_local_node(TargetName, Flag, 0).

start_one_local_node(TargetName, Flag, N) ->
    ThisNode = append_node_suffix(TargetName, "_maint_" ++ integer_to_list(N)),
    case net_kernel:start([ThisNode, Flag]) of
        {ok, _} ->
            ok;
        {error, _} ->
            start_one_local_node(TargetName, Flag, N + 1)
    end.

start_epmd() ->
    [] = os:cmd(epmd_path() ++ " -daemon"),
    ok.

epmd_path() ->
    ErtsBinDir = filename:dirname(escript:script_name()),
    Name = "epmd",
    case os:find_executable(Name, ErtsBinDir) of
        false ->
            case os:find_executable(Name) of
                false ->
                    io:format("Could not find epmd.~n"),
                    halt(1);
                GlobalEpmd ->
                    GlobalEpmd
            end;
        Epmd ->
            Epmd
    end.


nodename(Name) ->
    case string:tokens(Name, "@") of
        [_Node, _Host] ->
            list_to_atom(Name);
        [Node] ->
            [_, Host] = string:tokens(atom_to_list(node()), "@"),
            list_to_atom(lists:concat([Node, "@", Host]))
    end.

append_node_suffix(Name, Suffix) ->
    case string:tokens(Name, "@") of
        [Node, Host] ->
            list_to_atom(lists:concat([Node, Suffix, os:getpid(), "@", Host]));
        [Node] ->
            list_to_atom(lists:concat([Node, Suffix, os:getpid()]))
    end.


%%
%% Given a string or binary, parse it into a list of terms, ala file:consult/0
%%
usage() ->
    io:format("usage: todo ~n",[]).

parse(Str) ->
    prelude() ++ parse_rel (Str) ++ post_action().

parse_rel(Str) ->
    {ok, Tokens, _} = erl_scan:string(Str),
    {ok, Exprs} = erl_parse:parse_exprs(Tokens),
    expect_transform(Exprs).

expect_transform(Exprs) ->
    lists:flatmap(fun(X) -> expect_transform_expr(X) end,  Exprs).

expect_transform_expr({call,_LINE1,{atom,_LINE2,echo},[{atom,_LINE3,on}]}) ->
    erlang:put(echo, true),
    [];
expect_transform_expr({call,_LINE1,{atom,_LINE2,echo},[{atom,_LINE3,off}]}) ->
    erlang:put(echo, false),
    [];
expect_transform_expr(Expr) ->
    Line = element(2, Expr),
    ExprStr = binary_to_list(
                iolist_to_binary(
                  [ integer_to_list(Line), "> ", erl_pp:expr(Expr)])),
    Var = list_to_atom(
            binary_to_list(
              iolist_to_binary(
                [ "Out", integer_to_list(Line) ]))),
    %% for debugging: io:format("~p: ~s -> ~p~n",[Line, ExprStr, Expr]),
    case erlang:get(echo) of
        true ->
            [{call,Line,                                % io:format("~s~n",[<EXPR_STR>])
              {remote,Line,{atom,Line,io},{atom,Line,format}},
              [{string, Line, "~s~n"},
               {cons,Line,{string,Line,ExprStr},{nil,Line}}]},
             {match, Line, {var, 1, Var},               % Out<LINE> = <Result>
              Expr},
             {call,Line,                                % io:format("~p~n", [Out<LINE>])
              {remote,Line,{atom,Line,io},{atom,Line,format}},
              [{string, Line, "~p~n"},
               {cons,Line,{var, 1, Var},{nil,Line}}]}
            ];
        _ ->
            [Expr]
    end.



set_default_cookie() ->
    case os:getenv("ERLANG_COOKIE") of
        Cookie when is_list(Cookie) ->
            erlang:set_cookie(node(), list_to_atom(Cookie));
        _ ->
            ok
    end.


prelude() ->
    [].

post_action() ->
    Line = 0,
    [{call,Line,                                % io:format("~s~n",[<EXPR_STR>])
      {remote,Line,{atom,Line,erlang},{atom,Line,send}},
      [{tuple, Line, [{atom,Line,return_port},
                      {atom,Line,node()}]},
       {atom, Line, ok}]}].
